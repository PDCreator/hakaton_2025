<?php
session_start();
require 'includes/db.php';
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if (!isset($_SESSION['user'])) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    header("Location: index.php"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
    exit();
}
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['action']) && $_POST['action'] === 'update_status') {
        $task_id = $_POST['task_id'];
        $new_status = $_POST['new_status'];
        $task = $pdo->prepare("SELECT title FROM tasks WHERE id = :id");
        $task->execute(['id' => $task_id]);
        $task_title = $task->fetchColumn();

        $pdo->prepare("UPDATE tasks SET status = :status WHERE id = :id")->execute([
            'status' => $new_status,
            'id' => $task_id
        ]);
    }
}

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['create_task'])) {
    $title = $_POST['title'];
    $description = $_POST['description'];
    $assignee_fio = $_POST['assignee'];
    $priority = $_POST['priority'];
    $status = $_GET['status'] ?? '–¢–µ–∫—É—â–∏–µ';
    $allowed_statuses = ['–¢–µ–∫—É—â–∏–µ', '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ'];
    if (!in_array($status, $allowed_statuses)) {
        $status = '–¢–µ–∫—É—â–∏–µ';
    }

    $created_at = date('Y-m-d H:i:s');
    $due_date = $_POST['due_date'];

    // –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –§–ò–û
    $stmtAssignee = $pdo->prepare("SELECT id FROM users WHERE fio = :fio");
    $stmtAssignee->execute(['fio' => $assignee_fio]);
    $assignee_id = $stmtAssignee->fetchColumn();

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
    $username = $_SESSION['user'];
    $stmtUser = $pdo->prepare("SELECT id FROM users WHERE login = :username");
    $stmtUser->execute(['username' => $username]);
    $user_id = $stmtUser->fetchColumn();

    $stmt = $pdo->prepare("INSERT INTO tasks (title, description, assignee, priority, status, created_at, due_date) 
        VALUES (:title, :description, :assignee, :priority, :status, :created_at, :due_date)");
    $stmt->execute([
        'title' => $title,
        'description' => $description,
        'assignee' => $assignee_id,
        'priority' => $priority,
        'status' => $status,
        'created_at' => $created_at,
        'due_date' => $due_date
    ]);

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    $task_id = $pdo->lastInsertId();

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    $stmtHistory = $pdo->prepare("INSERT INTO task_history (task_id, user_id, event, title, changed_at) 
        VALUES (:task_id, :user_id, :event, :title, NOW())");
    $stmtHistory->execute([
        'task_id' => $task_id,
        'user_id' => $user_id,
        'event' => '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
        'title' => $title
    ]);
}

function getTasksByStatus($pdo, $status) {
    $query = "
        SELECT tasks.*, users.fio AS assignee_name
        FROM tasks
        LEFT JOIN users ON tasks.assignee = users.id
        WHERE tasks.status = :status
    ";

    $params = ['status' => $status];

    if (!empty($_GET['search_title'])) {
        $query .= " AND tasks.title LIKE :title";
        $params['title'] = '%' . $_GET['search_title'] . '%';
    }

    if (!empty($_GET['search_date'])) {
        $query .= " AND DATE(tasks.created_at) = :created";
        $params['created'] = $_GET['search_date'];
    }

    if (!empty($_GET['search_assignee'])) {
        $query .= " AND users.fio LIKE :fio";
        $params['fio'] = '%' . $_GET['search_assignee'] . '%';
    }

    $stmt = $pdo->prepare($query);
    $stmt->execute($params);
    return $stmt->fetchAll();
}

$current_tasks = getTasksByStatus($pdo, '–¢–µ–∫—É—â–∏–µ');
$delayed_tasks = getTasksByStatus($pdo, '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ');
$completed_tasks = getTasksByStatus($pdo, '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
$users = $pdo->query("SELECT fio FROM users")->fetchAll(PDO::FETCH_COLUMN);

?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <script src="https://cdn.tiny.cloud/1/m2091v96csqx8le5h2smjv6va8o2okgd50ahor84g1wbi9os/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
    tinymce.init({
        selector: 'textarea[name="description"]',
        plugins: 'lists image link code',
        toolbar: 'undo redo | bold italic underline | numlist bullist | image link | code',
        menubar: false
    });
    </script>

    <meta charset="UTF-8">
    <link rel="stylesheet" href="css/styles.css">
    <title>–ó–∞–¥–∞—á–∏</title>
    <style>
        .task-card {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px;
            position: relative;
            cursor: pointer;
        }

        .task-card .menu-button {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .context-menu {
            display: none;
            position: absolute;
            top: 20px;         /* –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É */
            right: 35px;       /* –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É */
            background: #fff;
            border: 1px solid #ccc;
            z-index: 100;
            padding: 5px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
            min-width: 160px;
        }

        .context-menu button { 
            display: block; 
            background: black; 
            color: white; 
            border: none; 
            padding: 5px; 
            cursor: pointer; 
            text-align: left; 
            width: 100%; 
        }
    </style>
    <script>
        function toggleMenu(id) {
            const targetMenu = document.getElementById('menu-' + id);
            const isVisible = targetMenu.style.display === 'block';

            // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–µ–Ω—é
            document.querySelectorAll('.context-menu').forEach(menu => menu.style.display = 'none');

            // –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (!isVisible) {
                targetMenu.style.display = 'block';
            }
        }

        document.addEventListener('click', function(e) {
            if (!e.target.classList.contains('menu-button')) {
                document.querySelectorAll('.context-menu').forEach(menu => menu.style.display = 'none');
            }
        });
        function toggleDetails(card) {
            const details = card.querySelector('.task-details');
            details.style.display = details.style.display === 'none' ? 'block' : 'none';
        }
    </script>
</head>
<body>
    <nav>
        <ul>
            <li><a href="index.php">–ì–ª–∞–≤–Ω–∞—è</a></li>
            <li><a href="articles/articles.php">–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</a></li>
            <li><a href="tasks.php">–ó–∞–¥–∞—á–∏</a></li>
            <li><a href="admin.php">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</a></li>
        </ul>
    </nav>
    <?php
        $status = $_GET['status'] ?? '–¢–µ–∫—É—â–∏–µ';
        $titles = [
            '–¢–µ–∫—É—â–∏–µ' => '–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏',
            '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ' => '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' => '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏'
        ];
        ?>
        <h2><?php echo $titles[$status] ?? '–ó–∞–¥–∞—á–∏'; ?></h2>


    <div class="tabs">
        <a href="?status=–¢–µ–∫—É—â–∏–µ">–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ (<?php echo count($current_tasks); ?>)</a>
        <a href="?status=–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ">–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (<?php echo count($delayed_tasks); ?>)</a>
        <a href="?status=–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</a>
        <a href="history.php">üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</a>
    </div>
    
    <?php if ($status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'): ?>
        <form method="POST">
            <input type="hidden" name="create_task" value="1">
            <input type="text" name="title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" required>
            <textarea id="description" name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"></textarea>

            <input type="text" name="assignee" placeholder="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–§–ò–û)" list="assignees" required>
            <datalist id="assignees">
                <?php foreach ($users as $fio): ?>
                    <option value="<?php echo htmlspecialchars($fio); ?>"></option>
                <?php endforeach; ?>
            </datalist>

            <select name="priority" required>
                <option value="–ù–∏–∑–∫–∏–π">–ù–∏–∑–∫–∏–π</option>
                <option value="–°—Ä–µ–¥–Ω–∏–π">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="–í—ã—Å–æ–∫–∏–π">–í—ã—Å–æ–∫–∏–π</option>
            </select>
            <?php $today = date('Y-m-d'); ?>
                <input type="date" name="due_date" min="<?php echo $today; ?>" required>
            <button type="submit">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
        </form>
    <?php endif; ?>

    <div class="task-list">
        <!-- üîç –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ -->
        <form method="GET" style="margin: 20px 0;">
    <input type="hidden" name="status" value="<?php echo htmlspecialchars($_GET['status'] ?? '–¢–µ–∫—É—â–∏–µ'); ?>">
    
    <input type="text" name="search_title" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
        value="<?php echo htmlspecialchars($_GET['search_title'] ?? ''); ?>">

    <input type="date" name="search_date" placeholder="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
        value="<?php echo htmlspecialchars($_GET['search_date'] ?? ''); ?>">

    <input type="text" name="search_assignee" placeholder="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (–§–ò–û)"
        value="<?php echo htmlspecialchars($_GET['search_assignee'] ?? ''); ?>">

    <button type="submit">üîç –ü–æ–∏—Å–∫</button>
    <a href="tasks.php?status=<?php echo urlencode($_GET['status'] ?? '–¢–µ–∫—É—â–∏–µ'); ?>" style="margin-left: 10px;">
        ‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
    </a>
</form>

    <?php
        function formatFriendlyDate($dateStr, $withTime = false) {
            $months = [
                1 => '—è–Ω–≤–∞—Ä—è', 2 => '—Ñ–µ–≤—Ä–∞–ª—è', 3 => '–º–∞—Ä—Ç–∞',
                4 => '–∞–ø—Ä–µ–ª—è', 5 => '–º–∞—è', 6 => '–∏—é–Ω—è',
                7 => '–∏—é–ª—è', 8 => '–∞–≤–≥—É—Å—Ç–∞', 9 => '—Å–µ–Ω—Ç—è–±—Ä—è',
                10 => '–æ–∫—Ç—è–±—Ä—è', 11 => '–Ω–æ—è–±—Ä—è', 12 => '–¥–µ–∫–∞–±—Ä—è'
            ];

            $timestamp = strtotime($dateStr);
            $day = date('j', $timestamp);
            $month = $months[(int)date('n', $timestamp)];
            $year = date('Y', $timestamp);

            $formatted = "$day $month $year";

            if ($withTime) {
                $time = date('H:i', $timestamp);
                $formatted .= " –≤ $time";
            }

            return $formatted;
        }
    ?>


    <?php 
        $status = $_GET['status'] ?? '–¢–µ–∫—É—â–∏–µ';
        $tasks = $status === '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ' ? $delayed_tasks : ($status === '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' ? $completed_tasks : $current_tasks);        
        foreach ($tasks as $task): ?>
            <div class="task-card" onclick="toggleDetails(this)">
    <div class="task-summary">
        <h3><?php echo htmlspecialchars($task['title']); ?></h3>
        <p><strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> <?php echo htmlspecialchars($task['assignee_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'); ?></p>
        <p><strong>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</strong> <?php echo formatFriendlyDate($task['due_date']); ?></p>

        <button class="menu-button" onclick="event.stopPropagation(); toggleMenu(<?php echo $task['id']; ?>)">‚ãÆ</button>
        <div class="context-menu" id="menu-<?php echo $task['id']; ?>">
            <form method="POST" style="margin: 0;">
                <input type="hidden" name="action" value="update_status">
                <input type="hidden" name="task_id" value="<?php echo $task['id']; ?>">
                <?php if ($status === '–¢–µ–∫—É—â–∏–µ'): ?>
                    <button name="new_status" value="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ">–û—Ç–ª–æ–∂–∏—Ç—å</button>
                    <button name="new_status" value="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
                <?php elseif ($status === '–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ'): ?>
                    <button name="new_status" value="–¢–µ–∫—É—â–∏–µ">–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>
                    <button name="new_status" value="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
                <?php elseif ($status === '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'): ?>
                    <button name="new_status" value="–¢–µ–∫—É—â–∏–µ">–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>
                <?php endif; ?>
                <button formaction="edit.php" formmethod="GET" name="id" value="<?php echo $task['id']; ?>">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button formaction="delete.php" formmethod="POST" name="id" value="<?php echo $task['id']; ?>">–£–¥–∞–ª–∏—Ç—å</button>
            </form>
        </div>
    </div>

    <div class="task-details" style="display: none;">
        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> <?php echo $task['description']; ?></p>
        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> <?php echo formatFriendlyDate($task['created_at'], true); ?></p>
        <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> <?php echo $task['priority']; ?></p>
    </div>
</div>
        <?php endforeach; ?>
    </div>
</body>
</html>
